package advpro.b2.rasukanlsp.model;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
public class PaymentTest {
    @BeforeEach
    void setUp() {}

    @Test
    void testIdAutoGenerated() {
        Payment payment = new Payment();
        String id = payment.getId();
        assertNotNull(id);
    }

    @Test
    void testCreatePayment_success() {
        String userId = "123d71a2-c421-4895-890b-1947e454d029";
        String orderId = "123d71a2-c421-4895-890b-1947e454d020";
        Long nominal = 100000L;
        String paymentStatus = "PENDING";

        Payment payment = new Payment(UUID.randomUUID(), userId, orderId, nominal, paymentStatus);

        assertEquals(userId, payment.getUserId());
        assertEquals(orderId, payment.getOrderId());
        assertEquals(nominal, Long.valueOf(payment.nominal()));
        assertEquals(paymentStatus, payment.getPaymentStatus());
    }

    @Test
    void testCreatePayment_userIdNotFound() {
        String orderId = "123d71a2-c421-4895-890b-1947e454d020";
        Long nominal = 100000L;
        String paymentStatus = "PENDING";

        assertThrows(IllegalArgumentException.class, () -> {
            new Payment(UUID.randomUUID(), null, orderId, nominal, paymentStatus);
        });
    }

    @Test
    void testCreatePayment_orderIdNotFound() {
        String userId = "123d71a2-c421-4895-890b-1947e454d029";
        Long nominal = 100000L;
        String paymentStatus = "PENDING";

        assertThrows(IllegalArgumentException.class, () -> {
            new Payment(UUID.randomUUID(), userId, null, nominal, paymentStatus);
        });
    }

    @Test
    void testCreatePayment_nominalInvalid() {
        String userId = "123d71a2-c421-4895-890b-1947e454d029";
        String orderId = "123d71a2-c421-4895-890b-1947e454d020";
        String paymentStatus = "PENDING";

        assertThrows(IllegalArgumentException.class, () -> {
            new Payment(UUID.randomUUID(), userId, orderId, null, paymentStatus);
        });
    }

    @Test
    void testCreatePayment_statusInvalid() {
        String userId = "123d71a2-c421-4895-890b-1947e454d029";
        String orderId = "123d71a2-c421-4895-890b-1947e454d020";
        Long nominal = 100000L;
        String paymentStatus = "MAMAAAAAA HUHU";

        assertThrows(IllegalArgumentException.class, () -> {
            new Payment(UUID.randomUUID(), userId, orderId, nominal, paymentStatus);
        });
    }
}
